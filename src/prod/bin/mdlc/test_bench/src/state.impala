

fn @adjust_state(state: State, pos: float3, normal: float3) -> State{
    State{
        position: @||{pos},
        normal: @||{ normal},
        geometry_normal: state.geometry_normal,
        motion: state.motion,
        texture_space_max: state.texture_space_max,
        texture_coordinate_int : state.texture_coordinate_int,
        texture_tangent_u_int : state.texture_tangent_u_int,
        texture_tangent_v_int : state.texture_tangent_v_int,
        tangent_space_int : state.tangent_space_int,
        geometry_tangent_u_int : state.geometry_tangent_u_int,
        geometry_tangent_v_int : state.geometry_tangent_v_int,
        direction: state.direction,
        animation_time: state.animation_time,
        wavelength_base: state.wavelength_base,
        transform_coordinate_space_coordinate_space : state.transform_coordinate_space_coordinate_space,
        transform_point_coordinate_space_coordinate_space_float3 :state.transform_point_coordinate_space_coordinate_space_float3,
        transform_vector_coordinate_space_coordinate_space_float3 : state.transform_vector_coordinate_space_coordinate_space_float3,
        transform_normal_coordinate_space_coordinate_space_float3 : state.transform_normal_coordinate_space_coordinate_space_float3,
        transform_scale_coordinate_space_coordinate_space_float : state.transform_scale_coordinate_space_coordinate_space_float,
        rounded_corner_normal_float_bool : state.rounded_corner_normal_float_bool,
        rounded_corner_normal_float_bool_float : state.rounded_corner_normal_float_bool_float,
        meters_per_scene_unit: state.meters_per_scene_unit,
        scene_units_per_meter: state.scene_units_per_meter,
        object_id: state.object_id,
        wavelength_min: state.wavelength_min,
        wavelength_max: state.wavelength_max,
    }
}

fn @make_state(
    position: float3,
    normal: float3,
    geometry_normal:float3,
    motion: float3,
    texture_space_max: int,
    texture_coordinate: fn(int) -> float3,
    texture_tangent_u : fn(int) -> float3,
    texture_tangent_v : fn(int) -> float3,
    tangent_space : fn(int) -> float3x3,
    geometry_tangent_u : fn(int) -> float3,
    geometry_tangent_v : fn(int) -> float3,
    direction: float3,
    animation_time: float,
    wavelength_base: float,
    meters_per_scene_unit: float,
    scene_units_per_meter: float,
    object_id: int,
    wavelength_min: float,
    wavelength_max: float,
    world_coordinate_space: float3x3,
    object_coordinate_space: float3x3,
    global_coordinate_space: float3x3
) -> State{
    State{
        position: @||{ position},
        normal: @||{ normal},
        geometry_normal: @||{ geometry_normal},
        motion: @||{ motion},
        texture_space_max: @||{texture_space_max},
        texture_coordinate_int : texture_coordinate,
        texture_tangent_u_int : texture_tangent_u,
        texture_tangent_v_int : texture_tangent_v,
        tangent_space_int : tangent_space,
        geometry_tangent_u_int : geometry_tangent_u,
        geometry_tangent_v_int : geometry_tangent_v,
        direction: @||{direction},
        animation_time: @||{animation_time},
        wavelength_base: @||{[wavelength_base]},
        transform_coordinate_space_coordinate_space : @|from_space:coordinate_space, to_space:coordinate_space,|{ 
            make_float4x4(
                make_float4(1.0f,0.0f,0.0f,0.0f),
                make_float4(0.0f,1.0f,0.0f,0.0f),
                make_float4(0.0f,0.0f,1.0f,0.0f),
                make_float4(0.0f,0.0f,0.0f,1.0f),
            )
        },
        transform_point_coordinate_space_coordinate_space_float3 : @|from_space:coordinate_space, to_space:coordinate_space,coord:float3,|{coord},
        transform_vector_coordinate_space_coordinate_space_float3 : @|from_space:coordinate_space, to_space:coordinate_space,coord:float3,|{coord},
        transform_normal_coordinate_space_coordinate_space_float3 : @|from_space:coordinate_space, to_space:coordinate_space,coord:float3,|{coord},
        transform_scale_coordinate_space_coordinate_space_float : @|from_space:coordinate_space, to_space:coordinate_space,scale:float,|{scale},
        rounded_corner_normal_float_bool : @|factor:float,is:bool,|{make_float3(0.0f,0.0f,0.0f)},
        rounded_corner_normal_float_bool_float : @|factor:float,is:bool,factor2:float,|{make_float3(0.0f,0.0f,0.0f)},
        meters_per_scene_unit: @||{meters_per_scene_unit},
        scene_units_per_meter: @||{scene_units_per_meter},
        object_id: @||{object_id},
        wavelength_min: @||{wavelength_min},
        wavelength_max: @||{wavelength_max}
    }
}

static dummy_state: State = State{
    position: @||{ make_float3(0.0f,0.0f,0.0f)},



    normal: @||{ make_float3(0.0f,0.0f,0.0f)},



    geometry_normal: @||{ make_float3(0.0f,0.0f,0.0f)},



    motion: @||{ make_float3(0.0f,0.0f,0.0f)},



    texture_space_max: @||{0},



    texture_coordinate_int : @|index:int|{ make_float3(0.0f,0.0f,0.0f)},



    texture_tangent_u_int : @|index:int|{ make_float3(0.0f,0.0f,0.0f)},



    texture_tangent_v_int : @|index:int|{ make_float3(0.0f,0.0f,0.0f)},



    tangent_space_int : @|index:int|{make_float3x3(make_float3(0.0f,0.0f,0.0f),make_float3(0.0f,0.0f,0.0f),make_float3(0.0f,0.0f,0.0f))},



    geometry_tangent_u_int : @|index:int|{ make_float3(0.0f,0.0f,0.0f)},



    geometry_tangent_v_int : @|index:int|{ make_float3(0.0f,0.0f,0.0f)},



    direction: @||{ make_float3(0.0f,0.0f,0.0f)},



    animation_time: @||{ 0.0f},



    wavelength_base: @||{ [0.0f]},





    transform_coordinate_space_coordinate_space : @|from_space:coordinate_space, to_space:coordinate_space,|{ make_float4x4(make_float4(0.0f,0.0f,0.0f,0.0f),make_float4(0.0f,0.0f,0.0f,0.0f),make_float4(0.0f,0.0f,0.0f,0.0f),make_float4(0.0f,0.0f,0.0f,0.0f))},



    transform_point_coordinate_space_coordinate_space_float3 : @|from_space:coordinate_space, to_space:coordinate_space,coord:float3,|{make_float3(0.0f,0.0f,0.0f)},



    transform_vector_coordinate_space_coordinate_space_float3 : @|from_space:coordinate_space, to_space:coordinate_space,coord:float3,|{make_float3(0.0f,0.0f,0.0f)},



    transform_normal_coordinate_space_coordinate_space_float3 : @|from_space:coordinate_space, to_space:coordinate_space,coord:float3,|{make_float3(0.0f,0.0f,0.0f)},



    transform_scale_coordinate_space_coordinate_space_float : @|from_space:coordinate_space, to_space:coordinate_space,scale:float,|{ 0.0f},



    rounded_corner_normal_float_bool : @|factor:float,is:bool,|{make_float3(0.0f,0.0f,0.0f)},



    rounded_corner_normal_float_bool_float : @|factor:float,is:bool,factor2:float,|{make_float3(0.0f,0.0f,0.0f)},



    meters_per_scene_unit: @||{ 0.0f},



    scene_units_per_meter: @||{ 0.0f},



    object_id: @||{0},



    wavelength_min: @||{ 0.0f},



    wavelength_max: @||{ 0.0f}
};



static WAVELENGTH_BASE_MAX: int = 1;

struct State {

position: fn() -> float3,



normal: fn() -> float3,



geometry_normal: fn() -> float3,



motion: fn() -> float3,



texture_space_max: fn() -> int,



texture_coordinate_int : fn(int) -> float3,



texture_tangent_u_int : fn(int) -> float3,



texture_tangent_v_int : fn(int) -> float3,



tangent_space_int : fn(int) -> float3x3,



geometry_tangent_u_int : fn(int) -> float3,



geometry_tangent_v_int : fn(int) -> float3,



direction: fn() -> float3,



animation_time: fn() -> float,



wavelength_base: fn() -> [float*1],





transform_coordinate_space_coordinate_space : fn(coordinate_space, coordinate_space) -> float4x4,



transform_point_coordinate_space_coordinate_space_float3 : fn(coordinate_space, coordinate_space, float3) -> float3,



transform_vector_coordinate_space_coordinate_space_float3 : fn(coordinate_space, coordinate_space, float3) -> float3,



transform_normal_coordinate_space_coordinate_space_float3 : fn(coordinate_space, coordinate_space, float3) -> float3,



transform_scale_coordinate_space_coordinate_space_float : fn(coordinate_space, coordinate_space, float) -> float,



rounded_corner_normal_float_bool : fn(float, bool) -> float3,



rounded_corner_normal_float_bool_float : fn(float, bool, float) -> float3,



meters_per_scene_unit: fn() -> float,



scene_units_per_meter: fn() -> float,



object_id: fn() -> int,



wavelength_min: fn() -> float,



wavelength_max: fn() -> float

}

type coordinate_space = int;
static coordinate_space_coordinate_internal: int = 0;
static coordinate_space_coordinate_object: int = 1;
static coordinate_space_coordinate_world: int = 2;


