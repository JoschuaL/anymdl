/******************************************************************************
 * Copyright (c) 2018-2020, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/

namespace mi {
namespace mdl {

/*! \page mi_mdl_core_example_calls Example for Function calls

<div align="right">
    [\link mi_mdl_core_example_cuda_shared Previous\endlink]
    [\link mi_mdl_core_examples Up\endlink]
    [\link mi_mdl_core_example_execution_ptx Next\endlink]
</div>

This example uses function calls to create a textured material.

\section example_calls_new New Topics

  - Main include file
  - Main API access point
  - Configuration of the Material_compiler helper class
  - Rationale for DAG nodes vs values
  - Creating a textured material

\section example_calls_descr Detailed Description

<dl>
<dt><b>Main include file</b></dt>
<dd>
The include file mi/mdl/mdl.h provides all the functionality of the \MDLCoreApiName.
</dd>

<dt><b>Main API access point</b></dt>
<dd>
The #mi_mdl_factory() function is the only public access point to all algorithms and data structures in the API.
To obtain a pointer to the main interface IMDL, call this function with a pointer to an object implementing the mi::base::IAllocator interface, if you want to use a custom memory allocator, or NULL, if you want to use a default malloc-based memory allocator.
The #mi_mdl_factory() function can only be called once per process.

Before you are able to call the #mi_mdl_factory() function, you need to load the \MDLCoreProductName library and locate the factory function.
The convenience function \c load_mdl_compiler() abstracts these platform-dependent steps.
</dd>

<dt><b>Configuration of the \c Material_compiler helper class</b></dt>
<dd>
In this example, we will use two MDL modules, \c "::nvidia::sdk_examples::tutorials" and \c "::base" to create a textured material.
In order to allow \MDLCoreProductName to locate MDL modules and its resources in the file system, it is necessary to configure the MDL module search path.
This is done by calling \c Material_compiler::add_module_path().
Please refer to section \link mi_mdl_core_example_shared The Material_compiler helper class\endlink for details.
</dd>

<dt><b>Rationale for DAG nodes vs values</b></dt>
<dd>
Arguments of material instances and function calls are not values, but DAG (Directed Acyclic Graph) nodes representing expressions.
For example, the argument for the \c "texture" parameter for the \c "::base::file_texture" function is an instance of DAG_node, and not of IValue_texture.
Why is this indirection needed?

If material instances and function calls are only used in isolation, simple values like IValue_texture would be sufficient.
However, much of the flexibility of MDL comes from the fact that one can create connections between material instances and function calls (provided the return type and the parameter type match).
These connections are represented by call DAG nodes, while simple values are represented by constant DAG nodes.
</dd>

<dt><b>Creating a textured material</b></dt>
<dd>
The method \c create_texture_material() shows all the steps needed to create a textured material in a bottom-up order.

First we load the MDL modules.
The \c "::nvidia::sdk_examples::tutorials" module contains the material definition that we are going to use.
The \c "::base" module contains a function definition that we will use to lookup the texture data.

With the modules loaded, we create a (not-yet-fully-initialized) material instance of the \c "::nvidia::sdk_examples::tutorials::example_material".
This object will serve as an owner for the DAG nodes and values we will create for the arguments.
DAG nodes for material instance arguments are created via the \c "create_*" methods of IGenerated_code_dag::IMaterial_instance.
This example uses a helper class \c Material_instance to create calls which automatically uses default values for missing parameters with defaults.
Values are created via \c "create_*" methods of IValue_factory.

Next we create a 2D texture value that represents the \c "nvidia_logo.png" file via IValue_factory::create_texture().
Note, that the \c tag and \c tag_version fields don't have any semantics and can be used freely by your application.

To access the texture data, we will use the \c "::base::file_texture()" function.
Apart from the texture itself, it supports several arguments to influence the texture lookup process.
In this example, we just set the texture value and leave the other arguments at their defaults.
We don't provide the exact (pretty long) signature of the function here, but just the prefix of the signature.
The \c Material_instance helper class will choose the first function definition matching this prefix.
Using this method frees one from providing the exact signature if there is only one overload.

The return type of the \c "::base::file_texture()" function is \c "::base::texture_return", a struct of two fields: \c "tint" of type IType_color and \c "mono" of type IType_float.
Since the material definition we plan to use has a parameter of type IType_color, we cannot directly attach the function call of \c "::base::file_texture()" to the material.
Instead we have to isolate the \c "tint" field in the returned struct.
This can be done by creating a call to a so-called \em member \em selection \em operator, which always gets the struct to access as argument \c "s".
In this case, the name of the required struct getter is \c "::base::texture_return.tint(::base::texture_return)".

Finally, we connect the just created instance of the member selection operator to the \c "tint" argument of our diffuse material by initializing the instance.
The dump of the material instance clearly shows the created call DAG nodes.
</dd>
</dl>

\section example_calls Example Source

<b>Source Code Location:</b>
  <tt>examples/mdl_core/calls/example_calls.cpp</tt>

\include calls/example_calls.cpp

<div align="right">
    [\link mi_mdl_core_example_cuda_shared Previous\endlink]
    [\link mi_mdl_core_examples Up\endlink]
    [\link mi_mdl_core_example_execution_ptx Next\endlink]
</div>

*/

}
}
