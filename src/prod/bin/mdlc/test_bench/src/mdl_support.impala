


struct material {
    thin_walled: bool,
    surface: material_surface,
    backface: material_surface,
    ior: fn(State) -> color,
    volume: material_volume,
    geometry: material_geometry,
}

struct material_parameters{
    thin_walled: bool,
    ior: color
}

fn @sample_material_bsdf(mat: material, data: &mut BSDF_sample_data, state: State, math: mdl_math) -> (){
    let pos = add__float3_float3_mdl_math(state.position(),mat.geometry.displacement(state), math);
    let normal = mat.geometry.normal(state);
    let surface = if(mat.backface.scattering.is_default || !mat.thin_walled || math.dot__float3_float3(data.k1, state.normal()) >= 0.0f) {mat.surface} else {mat.backface};
    let params = material_parameters{
        thin_walled: mat.thin_walled,
        ior: mat.ior(state)
    };
    let adj_state = adjust_state(state, pos, normal);
    surface.scattering.sample(data, adj_state, params);
}

fn @evaluate_material_bsdf(mat: material, data: &mut BSDF_evaluate_data, state: State, math: mdl_math) -> (){
    let pos = add__float3_float3_mdl_math(state.position(),mat.geometry.displacement(state), math);
    let normal = mat.geometry.normal(state);
    let surface = if(mat.backface.scattering.is_default || !mat.thin_walled || math.dot__float3_float3(data.k1, state.normal()) >= 0.0f) {mat.surface} else {mat.backface};
    let params = material_parameters{
        thin_walled: mat.thin_walled,
        ior: mat.ior(state)
    };
    let adj_state = adjust_state(state, pos, normal);
    surface.scattering.evaluate(data, adj_state, params);
}

fn @pdf_material_bsdf(mat: material, data: &mut BSDF_pdf_data, state: State, math: mdl_math) -> (){
    let pos = add__float3_float3_mdl_math(state.position(),mat.geometry.displacement(state), math);
    let normal = mat.geometry.normal(state);
    let surface = if(mat.backface.scattering.is_default || !mat.thin_walled || math.dot__float3_float3(data.k1, state.normal()) >= 0.0f) {mat.surface} else {mat.backface};
    let params = material_parameters{
        thin_walled: mat.thin_walled,
        ior: mat.ior(state)
    };
    let adj_state = adjust_state(state, pos, normal);
    surface.scattering.pdf(data, adj_state, params);
}

fn @sample_material_edf(mat: material, data: &mut EDF_sample_data, state: State, math: mdl_math) -> (){
    let pos = add__float3_float3_mdl_math(state.position(),mat.geometry.displacement(state), math);
    let normal = mat.geometry.normal(state);
    let surface = if(mat.backface.scattering.is_default || !mat.thin_walled || math.dot__float3_float3(data.k1, state.normal()) >= 0.0f) {mat.surface} else {mat.backface};
    let params = material_parameters{
        thin_walled: mat.thin_walled,
        ior: mat.ior(state)
    };
    let adj_state = adjust_state(state, pos, normal);
    surface.emission.emission.sample(data, adj_state, params);
}

fn @evaluate_material_edf(mat: material, data: &mut EDF_evaluate_data, state: State, math: mdl_math) -> (){
    let pos = add__float3_float3_mdl_math(state.position(),mat.geometry.displacement(state), math);
    let normal = mat.geometry.normal(state);
    let surface = if(mat.backface.scattering.is_default || !mat.thin_walled || math.dot__float3_float3(data.k1, state.normal()) >= 0.0f) {mat.surface} else {mat.backface};
    let params = material_parameters{
        thin_walled: mat.thin_walled,
        ior: mat.ior(state)
    };
        let adj_state = adjust_state(state, pos, normal);

    surface.emission.emission.evaluate(data, adj_state, params);
}

fn @pdf_material_edf(mat: material, data: &mut EDF_pdf_data, state: State, math: mdl_math) -> (){
    let pos = add__float3_float3_mdl_math(state.position(),mat.geometry.displacement(state), math);
    let normal = mat.geometry.normal(state);
    let surface = if(mat.backface.scattering.is_default || !mat.thin_walled || math.dot__float3_float3(data.k1, state.normal()) >= 0.0f) {mat.surface} else {mat.backface};
    let params = material_parameters{
        thin_walled: mat.thin_walled,
        ior: mat.ior(state)
    };
        let adj_state = adjust_state(state, pos, normal);

    surface.emission.emission.pdf(data, adj_state, params);
}

fn @sample_material_vdf(mat: material, data: &mut VDF_sample_data, state: State, math: mdl_math) -> (){
    let pos = add__float3_float3_mdl_math(state.position(),mat.geometry.displacement(state), math);
    let normal = mat.geometry.normal(state);
    let params = material_parameters{
        thin_walled: mat.thin_walled,
        ior: mat.ior(state)
    };
        let adj_state = adjust_state(state, pos, normal);

    mat.volume.scattering.sample(data, adj_state, params);
}

fn @evaluate_material_vdf(mat: material, data: &mut VDF_evaluate_data, state: State, math: mdl_math) -> (){
    let pos = add__float3_float3_mdl_math(state.position(),mat.geometry.displacement(state), math);
    let normal = mat.geometry.normal(state);
    let params = material_parameters{
        thin_walled: mat.thin_walled,
        ior: mat.ior(state)
    };
        let adj_state = adjust_state(state, pos, normal);

    mat.volume.scattering.evaluate(data, adj_state, params);
}

fn @pdf_material_vdf(mat: material, data: &mut VDF_pdf_data, state: State, math: mdl_math) -> (){
    let pos = add__float3_float3_mdl_math(state.position(),mat.geometry.displacement(state), math);
    let normal = mat.geometry.normal(state);
    let params = material_parameters{
        thin_walled: mat.thin_walled,
        ior: mat.ior(state)
    };
        let adj_state = adjust_state(state, pos, normal);

    mat.volume.scattering.pdf(data, adj_state, params);
}




fn @material__bool_material_surface_material_surface_color_material_volume_material_geometry_mdl_math(
    thin_walled: fn(State) -> bool,
    surface: fn(State) -> material_surface,
    backface: fn(State) -> material_surface,
    ior: fn(State) -> color,
    volume: fn(State) -> material_volume,
    geometry: fn(State) -> material_geometry,
    math: mdl_math
) -> material {
    
    material{
        thin_walled: thin_walled(dummy_state),
        surface: surface(dummy_state),
        backface: backface(dummy_state),
        ior: ior,
        volume: volume(dummy_state),
        geometry: geometry(dummy_state),
    }
}

fn @material__material(copy: fn(State) -> material) -> material{
    copy(dummy_state)
}



struct material_surface {
    scattering: bsdf,
    emission: material_emission,
};

fn @material_surface__bsdf_material_emission_mdl_math(
    scattering: fn(State) -> bsdf,
    emission: fn(State) -> material_emission,
    math: mdl_math
) -> material_surface{
    
        material_surface{
            scattering: scattering(dummy_state),
            emission: emission(dummy_state)
        }
    
}


fn @material_surface__material_surface(copy: fn(State) -> material_surface) -> material_surface{
    copy(dummy_state)
}



struct material_emission {
    emission: edf,
    intensity: fn(State) -> color,
    mode: intensity_mode
};
fn @material_emission__edf_color_intensity_mode_mdl_math(
    emission: fn(State) -> edf, 
    intensity: fn(State) -> color, 
    mode: fn(State) -> intensity_mode,
    math: mdl_math
) -> material_emission{
    
        material_emission{
            emission: emission(dummy_state),
            intensity: intensity,
            mode: mode(dummy_state)
        }
    
}

type intensity_mode = int;
static intensity_mode_intensity_radiant_exitance : int = 0;
static intensity_mode_intensity_power : int = 1;




struct material_volume {
    scattering: vdf,
    absorption_coefficient: fn(State) -> color,
    scattering_coefficient: fn(State) -> color
}

fn @material_volume__vdf_color_color_mdl_math(
    scattering: fn(State) -> vdf,
    absorption_coefficient: fn(State) -> color,
    scattering_coefficient: fn(State) -> color,
    math: mdl_math
) -> material_volume 
{
    
        material_volume{
            scattering: scattering(dummy_state),
            absorption_coefficient: absorption_coefficient,
            scattering_coefficient: scattering_coefficient
        }
    
}

struct material_geometry {
    displacement: fn(State) -> float3,
    cutout_opacity: fn(State) -> float,
    normal: fn(State) -> float3
}

fn @material_geometry__float3_float_float3_mdl_math(
    displacement: fn(State) -> float3,
    cutout_opacity: fn(State) -> float,
    normal: fn(State) -> float3,
    math: mdl_math
) -> material_geometry
{
    material_geometry{
        displacement: displacement,
        cutout_opacity: cutout_opacity,
        normal: normal
    }
}



    static BSDF_EVENT_DIFFUSE      = 1;
    static BSDF_EVENT_GLOSSY       = 1 << 1;
    static BSDF_EVENT_SPECULAR	    = 1 << 2;
    static BSDF_EVENT_REFLECTION   = 1 << 3;
    static BSDF_EVENT_TRANSMISSION = 1 << 4;



    static BSDF_EVENT_ABSORB = 0;
    static BSDF_EVENT_DIFFUSE_REFLECTION    = BSDF_EVENT_DIFFUSE  | BSDF_EVENT_REFLECTION;
    static BSDF_EVENT_DIFFUSE_TRANSMISSION  = BSDF_EVENT_DIFFUSE  | BSDF_EVENT_TRANSMISSION;
    static BSDF_EVENT_GLOSSY_REFLECTION     = BSDF_EVENT_GLOSSY   | BSDF_EVENT_REFLECTION;
    static BSDF_EVENT_GLOSSY_TRANSMISSION   = BSDF_EVENT_GLOSSY   | BSDF_EVENT_TRANSMISSION;
    static BSDF_EVENT_SPECULAR_REFLECTION   = BSDF_EVENT_SPECULAR | BSDF_EVENT_REFLECTION;
    static BSDF_EVENT_SPECULAR_TRANSMISSION = BSDF_EVENT_SPECULAR | BSDF_EVENT_TRANSMISSION;

   




static BSDF_USE_MATERIAL_IOR: float = -1.0f;

struct BSDF_sample_data
{
    // Input fields
    ior1: float3, // IOR current medium
    ior2: float3, // IOR other side
    k1: float3,  // outgoing direction
    xi: float3,  // pseudo-random sample number

    // Output fields
    k2: float3,            // incoming direction
    pdf: float,           // pdf (non-projected hemisphere)
    bsdf_over_pdf: float3, // bsdf * dot(normal, k2) / pdf
    event_type: int       // BSDF_event_type
}

struct BSDF_pdf_data
{
    // Input fields
    ior1: float3,
    ior2: float3,
    k1: float3,
    k2: float3,

    // Output fields
    pdf: float,
}

struct BSDF_evaluate_data
{
    // Input fields
    ior1: float3,
    ior2: float3,
    k1: float3,
    k2: float3,

    // Output fields
    bsdf: float3,
    pdf: float,
}

fn @make_bsdf_evaluate_data(
    ior1: float3,
    ior2: float3,
    k1: float3,
    k2: float3
) -> BSDF_evaluate_data
{
    BSDF_evaluate_data{
        ior1: ior1,
        ior2: ior2,
        k1: k1,
        k2: k2,
        bsdf: make_float3(0.0f,0.0f,0.0f),
        pdf: 0.0f
    }
}


    static EDF_EVENT_NONE = 0;
    static EDF_EVENT_EMISSION = 1;


struct EDF_sample_data
{
    // Input fields
    xi: float3,              // pseudo-random sample number

    // Output fields
    k1: float3,              // outgoing direction
    pdf: float,              // pdf (non-projected hemisphere)
    edf_over_pdf: float3,    // edf * dot(normal,k1) / pdf
    event_type: int
}

struct EDF_pdf_data
{
    // Input fields
    k1: float3,              // outgoing direction

    // Output fields
    pdf: float              // pdf (non-projected hemisphere)
}

struct EDF_evaluate_data
{
    // Input fields
    k1: float3,              // outgoing direction

    // Output fields
    cos: float,              // dot(normal, k1)
    edf: float3,             // edf
    pdf: float              // pdf (non-projected hemisphere)
}



struct VDF_sample_data{}

struct VDF_pdf_data{}

struct VDF_evaluate_data{}



struct bsdf{
    sample: fn(&mut BSDF_sample_data, State, material_parameters) -> (),
    pdf: fn(&mut BSDF_pdf_data, State, material_parameters) -> (),
    evaluate: fn(&mut BSDF_evaluate_data, State, material_parameters) -> (),
    is_default: bool,
    tint: fn(State) -> color
}


struct edf{
    sample: fn(&mut EDF_sample_data, State, material_parameters) -> (),
    pdf: fn(&mut EDF_pdf_data, State, material_parameters) -> (),
    evaluate: fn(&mut EDF_evaluate_data, State, material_parameters) -> (),
    is_default: bool
}

struct vdf{
    sample: fn(&mut VDF_sample_data, State, material_parameters) -> (),
    pdf: fn(&mut VDF_pdf_data, State, material_parameters) -> (),
    evaluate: fn(&mut VDF_evaluate_data, State, material_parameters) -> (),
    is_default: bool
}

fn @bsdf__mdl_math(math: mdl_math) -> bsdf
{
    
    bsdf{
        sample: @|data:&mut BSDF_sample_data, state:State, params: material_parameters|{
            absorb_sample(data);
        },
        pdf: @|data:&mut BSDF_pdf_data, state:State, params: material_parameters|{
            absorb_pdf(data);
        },
        evaluate: @|data:&mut BSDF_evaluate_data, state:State,params: material_parameters|{
            absorb_evaluate(data);
        },
        is_default: true,
        tint: @|state:State|{make_color(0.0f,0.0f,0.0f)}
    }
    
}

fn @bsdf__bsdf_mdl_math(b: fn(State) -> bsdf, math: mdl_math) -> bsdf{
    b(dummy_state)
}

fn @vdf__mdl_math(math: mdl_math) -> vdf
{
    
    vdf{
        sample: @|data:&mut VDF_sample_data, state:State, params: material_parameters|{
            
        },
        pdf: @|data:&mut VDF_pdf_data, state:State, params: material_parameters|{
            
        },
        evaluate: @|data:&mut VDF_evaluate_data, state:State, params: material_parameters|{
            
        },
        is_default: true
    }
    
}

fn @vdf__vdf_mdl_math(v: fn(State) -> vdf, math: mdl_math) -> vdf{
    v(dummy_state)
}

fn @edf__edf_mdl_math(e: fn(State) -> edf, math: mdl_math) -> edf{
    e(dummy_state)
}

fn @edf__mdl_math(math: mdl_math) -> edf
{
    
    edf{
        sample: @|data:&mut EDF_sample_data, state:State, params: material_parameters|{
            no_emission_sample(data)
        },
        pdf: @|data:&mut EDF_pdf_data, state:State, params: material_parameters|{
            no_emission_pdf(data)
        },
        evaluate: @|data:&mut EDF_evaluate_data, state:State, params: material_parameters|{
            no_emission_evaluate(data)
        },
        is_default: true
    }
    
}