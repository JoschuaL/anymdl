mdl 1.4;

import df::*;
import state::*;
import math::*;
import limits::*;
import tex::*;

/*
export material glossy_material(float2 roughness = float2(0.0), color tint = color(1.0))
= let bsdf tmp = df::simple_glossy_bsdf(roughness[0], roughness[1], color(state::normal()) * tint);
in material(
    surface: material_surface(scattering: tmp),
    backface: material_surface(scattering: tmp)
);

export material simple_glossy_material()
= glossy_material();












export material uv_as_color_material(color tt = color(1.0)) =
let {
    bsdf diffuse_bsdf = df::diffuse_reflection_bsdf(tint: tt);
} in material(
   surface: material_surface(scattering: diffuse_bsdf));





export material gloss(color tt = color(1.0), float ru = 0.0, float rv = 0.0) =
    material(
        surface: material_surface(scattering: df::simple_glossy_bsdf(roughness_u: ru, roughness_v: rv, tint: tt))
    );





export float lerpf(float a, float b, float l){
    return a * (1.0f - l) + b * l;
}

export float2 lerp2f(float2 a, float2 b, float2 l){
    return float2(
        lerpf(a[0], b[0], l[0]),
        lerpf(a[1], b[1], l[1])
    );
}




// A material used for instance compilation vs class compilation.
export material example_compilation(color tint = color(1.0f))
= material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(tint: tint * color(state::normal()))
    )
);

*/

export float3 tester(){
    float3 a = float3(10.0f);
    float b = 5.0f;
    a *= b;
    return a;
}


