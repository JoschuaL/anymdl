/******************************************************************************
 * Copyright (c) 2012-2020, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/
mdl 1.6;

export annotation soft_range(int     min, int     max);
export annotation soft_range(float   min, float   max);
export annotation soft_range(double  min, double  max);
export annotation soft_range(color   min, color   max); // since(1,2)
export annotation soft_range(float2  min, float2  max); // since(1,2)
export annotation soft_range(float3  min, float3  max); // since(1,2)
export annotation soft_range(float4  min, float4  max); // since(1,2)
export annotation soft_range(double2 min, double2 max); // since(1,2)
export annotation soft_range(double3 min, double3 max); // since(1,2)
export annotation soft_range(double4 min, double4 max); // since(1,2)
export annotation soft_range(int2    min, int2    max); // since(1,2)
export annotation soft_range(int3    min, int3    max); // since(1,2)
export annotation soft_range(int4    min, int4    max); // since(1,2)

export annotation hard_range(int     min, int     max);
export annotation hard_range(float   min, float   max);
export annotation hard_range(double  min, double  max);
export annotation hard_range(color   min, color   max); // since(1,2)
export annotation hard_range(float2  min, float2  max); // since(1,2)
export annotation hard_range(float3  min, float3  max); // since(1,2)
export annotation hard_range(float4  min, float4  max); // since(1,2)
export annotation hard_range(double2 min, double2 max); // since(1,2)
export annotation hard_range(double3 min, double3 max); // since(1,2)
export annotation hard_range(double4 min, double4 max); // since(1,2)
export annotation hard_range(int2    min, int2    max); // since(1,2)
export annotation hard_range(int3    min, int3    max); // since(1,2)
export annotation hard_range(int4    min, int4    max); // since(1,2)

export annotation display_name(string name);

export annotation in_group(string group);
export annotation in_group(string group, string subgroup);
export annotation in_group(string group, string subgroup, string subsubgroup);

export annotation hidden();

export annotation description(string description);

export annotation author(string name);

export annotation contributor(string name);

export annotation copyright_notice(string copyright);

export annotation created(int year, int month, int day, string notes);

export annotation modified(int year, int month, int day, string notes);

export annotation version_number(int major, int minor, int branch, int build); // removed(1,3)

export annotation key_words(string[<N>] words);

export annotation unused();
export annotation unused(string description);

export annotation noinline();

export annotation deprecated();                   // since(1,3)
export annotation deprecated(string description); // since(1,3)

export annotation version(int major, int minor, int patch, string prerelease = ""); // since(1,3)

export annotation dependency(
    string module_name, int major, int minor, int patch, string prerelease = ""); // since(1,3)

export annotation ui_order(int order); // since(1,4)

export annotation usage(string hint);  // since(1,4)

export annotation enable_if(string condition); // since(1,4)

export annotation thumbnail(string name); // since(1,4)

export annotation origin(string name); // since(1,5)
