
type Scalar = f32;
type Integer = i32;

fn @sqrt(math: Intrinsics, x: Scalar) -> Scalar { math.sqrtf(x) }
fn @rsqrt(math: Intrinsics, x: Scalar) -> Scalar { math.rsqrtf(x) }

type Vec2 = float2;
type Vec3 = float3;
type Vec4 = float4;

type Vec2i = int2;
type Vec3i = int3;
type Vec4i = int4;


struct Mat4 { c0: Vec4, c1: Vec4, c2: Vec4, c3: Vec4 };


type FixedPoint = Integer;

type Vec2fp = int2;

fn @make_vec2(x: Scalar, y: Scalar) -> Vec2 { Vec2 { x: x, y: y } }
fn @make_vec3(x: Scalar, y: Scalar, z: Scalar) -> Vec3 { Vec3 { x: x, y: y, z: z } }
fn @make_vec4(x: Scalar, y: Scalar, z: Scalar, w: Scalar) -> Vec4 { Vec4 { x: x, y: y, z: z, w: w } }

// shortcut
fn @vec2(x: Scalar, y: Scalar                      ) -> Vec2 { make_vec2(x, y) }
fn @vec3(x: Scalar, y: Scalar, z: Scalar           ) -> Vec3 { make_vec3(x, y, z) }
fn @vec4(x: Scalar, y: Scalar, z: Scalar, w: Scalar) -> Vec4 { make_vec4(x, y, z, w) }

fn @vec2_to_3(v: Vec2, z: Scalar) -> Vec3 { make_vec3(v.x, v.y, z) }
fn @vec3_to_4(v: Vec3, w: Scalar) -> Vec4 { make_vec4(v.x, v.y, v.z, w) }
fn @vec3_to_2(v: Vec3) -> Vec2 { make_vec2(v.x, v.y) }
fn @vec4_to_2(v: Vec4) -> Vec2 { make_vec2(v.x, v.y) }
fn @vec4_to_3(v: Vec4) -> Vec3 { make_vec3(v.x, v.y, v.z) }

type MapFn = fn (Scalar) -> Scalar;
fn @vec2_map(v: Vec2, f: MapFn) -> Vec2 { make_vec2(@@f(v.x), @@f(v.y)) }
fn @vec3_map(v: Vec3, f: MapFn) -> Vec3 { make_vec3(@@f(v.x), @@f(v.y), @@f(v.z)) }
fn @vec4_map(v: Vec4, f: MapFn) -> Vec4 { make_vec4(@@f(v.x), @@f(v.y), @@f(v.z), @@f(v.w)) }

type ZipFn = fn (Scalar, Scalar) -> Scalar;
fn @vec2_zip(a: Vec2, b: Vec2, f: ZipFn) -> Vec2 { make_vec2(@@f(a.x, b.x), @@f(a.y, b.y)) }
fn @vec3_zip(a: Vec3, b: Vec3, f: ZipFn) -> Vec3 { make_vec3(@@f(a.x, b.x), @@f(a.y, b.y), @@f(a.z, b.z)) }
fn @vec4_zip(a: Vec4, b: Vec4, f: ZipFn) -> Vec4 { make_vec4(@@f(a.x, b.x), @@f(a.y, b.y), @@f(a.z, b.z), @@f(a.w, b.w)) }

fn @vec2_add(a: Vec2, b: Vec2) -> Vec2 { vec2_zip(a, b, |x, y| x + y) }
fn @vec3_add(a: Vec3, b: Vec3) -> Vec3 { vec3_zip(a, b, |x, y| x + y) }
fn @vec4_add(a: Vec4, b: Vec4) -> Vec4 { vec4_zip(a, b, |x, y| x + y) }
fn @vec2_sub(a: Vec2, b: Vec2) -> Vec2 { vec2_zip(a, b, |x, y| x - y) }
fn @vec3_sub(a: Vec3, b: Vec3) -> Vec3 { vec3_zip(a, b, |x, y| x - y) }
fn @vec4_sub(a: Vec4, b: Vec4) -> Vec4 { vec4_zip(a, b, |x, y| x - y) }
fn @vec2_mul(a: Vec2, b: Vec2) -> Vec2 { vec2_zip(a, b, |x, y| x * y) }
fn @vec3_mul(a: Vec3, b: Vec3) -> Vec3 { vec3_zip(a, b, |x, y| x * y) }
fn @vec4_mul(a: Vec4, b: Vec4) -> Vec4 { vec4_zip(a, b, |x, y| x * y) }
fn @vec2_div(a: Vec2, b: Vec2) -> Vec2 { vec2_zip(a, b, |x, y| x / y) }
fn @vec3_div(a: Vec3, b: Vec3) -> Vec3 { vec3_zip(a, b, |x, y| x / y) }
fn @vec4_div(a: Vec4, b: Vec4) -> Vec4 { vec4_zip(a, b, |x, y| x / y) }

fn @vec2_neg(v: Vec2) -> Vec2 { vec2_map(v, |x| -x) }
fn @vec3_neg(v: Vec3) -> Vec3 { vec3_map(v, |x| -x) }
fn @vec4_neg(v: Vec4) -> Vec4 { vec4_map(v, |x| -x) }

fn @vec2_mulf(v: Vec2, t: Scalar) -> Vec2 { vec2_mul(v, make_vec2(t, t)) }
fn @vec3_mulf(v: Vec3, t: Scalar) -> Vec3 { vec3_mul(v, make_vec3(t, t, t)) }
fn @vec4_mulf(v: Vec4, t: Scalar) -> Vec4 { vec4_mul(v, make_vec4(t, t, t, t)) }

fn @vec2_dot(a: Vec2, b: Vec2) -> Scalar { a.x * b.x + a.y * b.y }
fn @vec3_dot(a: Vec3, b: Vec3) -> Scalar { a.x * b.x + a.y * b.y + a.z * b.z }
fn @vec4_dot(a: Vec4, b: Vec4) -> Scalar { a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w }

fn @vec3_cross(a: Vec3, b: Vec3) -> Vec3 {
    make_vec3(a.y * b.z - a.z * b.y,
              a.z * b.x - a.x * b.z,
              a.x * b.y - a.y * b.x)
}

fn @vec2_len2(v: Vec2) -> Scalar { vec2_dot(v, v) }
fn @vec3_len2(v: Vec3) -> Scalar { vec3_dot(v, v) }
fn @vec4_len2(v: Vec4) -> Scalar { vec4_dot(v, v) }

fn @vec2_len(math: Intrinsics, v: Vec2) -> Scalar { sqrt(math, vec2_len2(v)) }
fn @vec3_len(math: Intrinsics, v: Vec3) -> Scalar { sqrt(math, vec3_len2(v)) }
fn @vec4_len(math: Intrinsics, v: Vec4) -> Scalar { sqrt(math, vec4_len2(v)) }

fn @vec2_normalize(math: Intrinsics, v: Vec2) -> Vec2 { vec2_mulf(v, rsqrt(math, vec2_len2(v))) }
fn @vec3_normalize(math: Intrinsics, v: Vec3) -> Vec3 { vec3_mulf(v, rsqrt(math, vec3_len2(v))) }
fn @vec4_normalize(math: Intrinsics, v: Vec4) -> Vec4 { vec4_mulf(v, rsqrt(math, vec4_len2(v))) }

// legacy

fn @vec3_scale(v: Vec3, s: Scalar) -> Vec3 { vec3_mulf(v, s) }
fn @vec3_length(v: Vec3, math: Intrinsics) -> Scalar { vec3_len(math, v) }


fn @mat4_mul_vec4(m: Mat4, v: Vec4) -> Vec4 {
    let t = mat4_transpose(m);
    vec4(vec4_dot(v, t.c0), vec4_dot(v, t.c1), vec4_dot(v, t.c2), vec4_dot(v, t.c3))
}

fn @mat4_transpose(m: Mat4) -> Mat4 {
    Mat4 {
		c0: vec4(m.c0.x, m.c1.x, m.c2.x, m.c3.x),
		c1: vec4(m.c0.y, m.c1.y, m.c2.y, m.c3.y),
		c2: vec4(m.c0.z, m.c1.z, m.c2.z, m.c3.z),
		c3: vec4(m.c0.w, m.c1.w, m.c2.w, m.c3.w)
    }
}

fn vec2i(x: Integer, y: Integer) -> Vec2i { Vec2i {x: x, y: y} }
fn vec4i(x: Integer, y: Integer, z: Integer, w: Integer) -> Vec4i { Vec4i {x: x, y: y, z: z, w: w} }

struct Bounds2Di {
	min: Vec2i,
	max: Vec2i
};

fn print_vec2i(v: Vec2i) -> () {
	print_char('[');
	print_i32(v.x);
	print_char(','); print_char(' ');
	print_i32(v.y);
	print_char(']'); print_char('\n');
}

fn print_vec4(v: Vec4) -> () {
	print_char('[');
	print_f32(v.x); print_string(", ");
	print_f32(v.y); print_string(", ");
	print_f32(v.z); print_string(", ");
	print_f32(v.w);
	print_char(']'); print_char('\n');
}
