/******************************************************************************
 * Copyright (c) 2012-2020, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/
mdl 1.6;

export float3 [[ derivable() ]] position() varying [[ intrinsic() ]];

export float3 normal() varying [[ intrinsic() ]];

export float3 geometry_normal() varying [[ intrinsic() ]];

export float3 motion() varying [[ intrinsic() ]];

export int texture_space_max() varying [[ intrinsic() ]];

export float3 [[ derivable() ]] texture_coordinate(int index) varying [[ intrinsic(), throws() ]];

export float3 texture_tangent_u(int index) varying [[ intrinsic(), throws() ]];

export float3 texture_tangent_v(int index) varying [[ intrinsic(), throws() ]];

export float3x3 tangent_space(int index) varying [[ intrinsic(), throws() ]];

export float3 geometry_tangent_u(int index) varying [[ intrinsic(), throws() ]];

export float3 geometry_tangent_v(int index) varying [[ intrinsic(), throws() ]];

export float3 direction() varying [[ intrinsic() ]];

export float animation_time() varying [[ intrinsic() ]];

// automatically set by the compiler and can be changed by compiler options:
// const int WAVELENGTH_BASE_MAX = __WAVELENGTH_BASE_MAX__;

export float[WAVELENGTH_BASE_MAX] wavelength_base() uniform [[ intrinsic() ]];

export enum coordinate_space {
    coordinate_internal,
    coordinate_object,
    coordinate_world
};

export float4x4 transform(
    coordinate_space from,
    coordinate_space to) uniform [[ intrinsic() ]];

export float3 transform_point(
    coordinate_space from,
    coordinate_space to,
    float3 point) uniform [[ intrinsic() ]];

export float3 transform_vector(
    coordinate_space from,
    coordinate_space to,
    float3 vector) uniform [[ intrinsic() ]];

export float3 transform_normal(
    coordinate_space from,
    coordinate_space to,
    float3 normal) uniform [[ intrinsic() ]];

export float transform_scale(
    coordinate_space from,
    coordinate_space to,
    float scale) uniform [[ intrinsic() ]];

export float3 rounded_corner_normal(
    uniform float radius = 0.0,
    uniform bool  across_materials = false) varying [[ intrinsic(), removed(1, 3) ]];

export float3 rounded_corner_normal(
    uniform float radius = 0.0,
    uniform bool  across_materials = false,
    uniform float roundness = 1.0
) varying [[ intrinsic(), since(1, 3) ]];

export float meters_per_scene_unit() uniform [[ intrinsic(), since(1, 2) ]];
export float scene_units_per_meter() uniform [[ intrinsic(), since(1, 2) ]];

export int object_id() uniform [[ intrinsic(), since(1, 2) ]];

export float wavelength_min() uniform [[ intrinsic(), since(1, 3) ]];
export float wavelength_max() uniform [[ intrinsic(), since(1, 3) ]];
