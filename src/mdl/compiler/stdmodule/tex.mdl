/******************************************************************************
 * Copyright (c) 2012-2020, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/
mdl 1.6;

export enum gamma_mode {
    gamma_default,
    gamma_linear,
    gamma_srgb
};

export enum wrap_mode {
    wrap_clamp, // whatever iray does
    wrap_repeat,
    wrap_mirrored_repeat,
    wrap_clip
};

export int width(
    uniform texture_2d tex) uniform [[ intrinsic(), removed(1,4) ]];

export int width(
    uniform texture_2d tex,
    int2 uv_tile = int2(0, 0)) uniform [[ intrinsic(), since(1,4) ]];

export int height(
    uniform texture_2d tex) uniform [[ intrinsic(), removed(1,4) ]];

export int height(
    uniform texture_2d tex,
    int2 uv_tile = int2(0, 0)) uniform [[ intrinsic(), since(1,4) ]];

export int width(uniform texture_3d tex) uniform [[ intrinsic() ]];
export int height(uniform texture_3d tex) uniform [[ intrinsic() ]];
export int depth(uniform texture_3d tex) uniform [[ intrinsic() ]];

export int width(uniform texture_cube tex) uniform [[ intrinsic() ]];
export int height(uniform texture_cube tex) uniform [[ intrinsic() ]];

export float lookup_float(
    uniform texture_2d tex,
    float2             coord [[ derivable() ]],
    uniform wrap_mode  wrap_u = wrap_repeat,
    uniform wrap_mode  wrap_v = wrap_repeat,
    uniform float2     crop_u = float2(0.0, 1.0),
    uniform float2     crop_v = float2(0.0, 1.0)) uniform [[ intrinsic() ]];

export float lookup_float(
    uniform texture_3d tex,
    float3             coord,
    uniform wrap_mode  wrap_u = wrap_repeat,
    uniform wrap_mode  wrap_v = wrap_repeat,
    uniform wrap_mode  wrap_w = wrap_repeat,
    uniform float2     crop_u = float2(0.0, 1.0),
    uniform float2     crop_v = float2(0.0, 1.0),
    uniform float2     crop_w = float2(0.0, 1.0)) uniform [[ intrinsic() ]];

export float lookup_float(
    uniform texture_cube tex,
    float3 coord) uniform [[ intrinsic() ]];

export float lookup_float(
    uniform texture_ptex tex,
    int channel = 0) varying [[ intrinsic() ]];

export float2 lookup_float2(
    uniform texture_2d tex,
    float2             coord [[ derivable() ]],
    uniform wrap_mode  wrap_u = wrap_repeat,
    uniform wrap_mode  wrap_v = wrap_repeat,
    uniform float2     crop_u = float2(0.0, 1.0),
    uniform float2     crop_v = float2(0.0, 1.0)) uniform [[ intrinsic() ]];

export float2 lookup_float2(
    uniform texture_3d tex,
    float3             coord,
    uniform wrap_mode  wrap_u = wrap_repeat,
    uniform wrap_mode  wrap_v = wrap_repeat,
    uniform wrap_mode  wrap_w = wrap_repeat,
    uniform float2     crop_u = float2(0.0, 1.0),
    uniform float2     crop_v = float2(0.0, 1.0),
    uniform float2     crop_w = float2(0.0, 1.0)) uniform [[ intrinsic() ]];

export float2 lookup_float2(
    uniform texture_cube tex,
    float3 coord) uniform [[ intrinsic() ]];

export float2 lookup_float2(
    uniform texture_ptex tex,
    int channel = 0) varying [[ intrinsic() ]];

export float3 lookup_float3(
    uniform texture_2d tex,
    float2             coord [[ derivable() ]],
    uniform wrap_mode  wrap_u = wrap_repeat,
    uniform wrap_mode  wrap_v = wrap_repeat,
    uniform float2     crop_u = float2(0.0, 1.0),
    uniform float2     crop_v = float2(0.0, 1.0)) uniform [[ intrinsic() ]];

export float3 lookup_float3(
    uniform texture_3d tex,
    float3             coord,
    uniform wrap_mode  wrap_u = wrap_repeat,
    uniform wrap_mode  wrap_v = wrap_repeat,
    uniform wrap_mode  wrap_w = wrap_repeat,
    uniform float2     crop_u = float2(0.0, 1.0),
    uniform float2     crop_v = float2(0.0, 1.0),
    uniform float2     crop_w = float2(0.0, 1.0)) uniform [[ intrinsic() ]];

export float3 lookup_float3(
    uniform texture_cube tex,
    float3 coord) uniform [[ intrinsic() ]];

export float3 lookup_float3(
    uniform texture_ptex tex,
    int channel = 0) varying [[ intrinsic() ]];

export float4 lookup_float4(
    uniform texture_2d tex,
    float2             coord [[ derivable() ]],
    uniform wrap_mode  wrap_u = wrap_repeat,
    uniform wrap_mode  wrap_v = wrap_repeat,
    uniform float2     crop_u = float2(0.0, 1.0),
    uniform float2     crop_v = float2(0.0, 1.0)) uniform [[ intrinsic() ]];

export float4 lookup_float4(
    uniform texture_3d tex,
    float3             coord,
    uniform wrap_mode  wrap_u = wrap_repeat,
    uniform wrap_mode  wrap_v = wrap_repeat,
    uniform wrap_mode  wrap_w = wrap_repeat,
    uniform float2     crop_u = float2(0.0, 1.0),
    uniform float2     crop_v = float2(0.0, 1.0),
    uniform float2     crop_w = float2(0.0, 1.0)) uniform [[ intrinsic() ]];

export float4 lookup_float4(
    uniform texture_cube tex,
    float3 coord) uniform [[ intrinsic() ]];

export float4 lookup_float4(
    uniform texture_ptex tex,
    int channel = 0) varying [[ intrinsic() ]];

export color lookup_color(
    uniform texture_2d tex,
    float2             coord [[ derivable() ]],
    uniform wrap_mode  wrap_u = wrap_repeat,
    uniform wrap_mode  wrap_v = wrap_repeat,
    uniform float2     crop_u = float2(0.0, 1.0),
    uniform float2     crop_v = float2(0.0, 1.0)) uniform [[ intrinsic() ]];

export color lookup_color(
    uniform texture_3d tex,
    float3             coord,
    uniform wrap_mode  wrap_u = wrap_repeat,
    uniform wrap_mode  wrap_v = wrap_repeat,
    uniform wrap_mode  wrap_w = wrap_repeat,
    uniform float2     crop_u = float2(0.0, 1.0),
    uniform float2     crop_v = float2(0.0, 1.0),
    uniform float2     crop_w = float2(0.0, 1.0)) uniform [[ intrinsic() ]];

export color lookup_color(
    uniform texture_cube tex,
    float3 coord) uniform [[ intrinsic() ]];

export color lookup_color(
    uniform texture_ptex tex,
    int channel = 0) varying [[ intrinsic() ]];

// texel functions
export float  texel_float(
    uniform texture_2d tex,
    int2 coord) uniform [[ intrinsic(), removed(1,4) ]];

export float  texel_float(
    uniform texture_2d tex,
    int2 coord,
    int2 uv_tile = int2(0, 0)) uniform [[ intrinsic(), since(1,4) ]];

export float2 texel_float2(
    uniform texture_2d tex,
    int2 coord) uniform [[ intrinsic(), removed(1,4) ]];

export float2 texel_float2(
    uniform texture_2d tex,
    int2 coord,
    int2 uv_tile = int2(0, 0)) uniform [[ intrinsic(), since(1,4) ]];

export float3 texel_float3(
    uniform texture_2d tex,
    int2 coord) uniform [[ intrinsic(), removed(1,4) ]];

export float3 texel_float3(
    uniform texture_2d tex,
    int2 coord,
    int2 uv_tile = int2(0, 0)) uniform [[ intrinsic(), since(1,4) ]];

export float4 texel_float4(
    uniform texture_2d tex,
    int2 coord) uniform [[ intrinsic(), removed(1,4) ]];

export float4 texel_float4(
    uniform texture_2d tex,
    int2 coord,
    int2 uv_tile = int2(0, 0)) uniform [[ intrinsic(), since(1,4) ]];

export color  texel_color(
    uniform texture_2d tex,
    int2 coord) uniform [[ intrinsic(), removed(1,4) ]];

export color  texel_color(
    uniform texture_2d tex,
    int2 coord,
    int2 uv_tile = int2(0, 0)) uniform [[ intrinsic(), since(1,4) ]];

export float  texel_float(uniform texture_3d tex, int3 coord) uniform [[ intrinsic(), since(1,3) ]];
export float2 texel_float2(uniform texture_3d tex, int3 coord) uniform [[ intrinsic(), since(1,3) ]];
export float3 texel_float3(uniform texture_3d tex, int3 coord) uniform [[ intrinsic(), since(1,3) ]];
export float4 texel_float4(uniform texture_3d tex, int3 coord) uniform [[ intrinsic(), since(1,3) ]];
export color  texel_color(uniform texture_3d tex, int3 coord) uniform [[ intrinsic(), since(1,3) ]];

// check for valid resource
export bool texture_isvalid(uniform texture_2d   tex) uniform [[ intrinsic(), since(1,2) ]];
export bool texture_isvalid(uniform texture_3d   tex) uniform [[ intrinsic(), since(1,2) ]];
export bool texture_isvalid(uniform texture_cube tex) uniform [[ intrinsic(), since(1,2) ]];
export bool texture_isvalid(uniform texture_ptex tex) uniform [[ intrinsic(), since(1,2) ]];
