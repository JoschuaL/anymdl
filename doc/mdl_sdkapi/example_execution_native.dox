/******************************************************************************
 * Copyright (c) 2017-2020, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/

/*! \page mi_neuray_example_execution_native Example for Execution of Compiled MDL Materials (CPU)

<div align="right">
    [\link mi_neuray_example_code_gen Previous\endlink]
    [\link mi_neuray_examples Up\endlink]
    [\link mi_neuray_example_execution_ptx Next\endlink]
</div>

This example shows how a renderer can call the code generated by the "native" backend for
compiled materials to evaluate sub-expressions of multiple materials on the CPU.

\section example_execution_native_new New Topics

  - MDL material state (CPU)
  - Execution of generated code (CPU)
  - Texture handling

\section example_execution_native_descr Detailed Description

<dl>
<dt><b>MDL material state (CPU)</b></dt>
<dd><br>
The MDL material state structure #mi::neuraylib::Shading_state_material is a representation
of the renderer state as defined in section 19 "Renderer state" in the MDL
specification. It is used to make the state of the renderer (like the position of an
intersection point on the surface, the shading normal and the texture coordinates)
available to the generated code.

Here's the material state structure just for reference:

\code
    struct Shading_state_material {
        tct_float3           normal;              // state::normal() result
        tct_float3           geom_normal;         // state::geom_normal() result
        tct_float3           position;            // state::position() result
        tct_float            animation_time;      // state::animation_time() result
        const tct_float3    *text_coords;         // state::texture_coordinate() table
        const tct_float3    *tangent_u;           // state::texture_tangent_u() table
        const tct_float3    *tangent_v;           // state::texture_tangent_v() table
        tct_float4          *text_results;        // texture results lookup table
        const char          *ro_data_segment;     // read-only data segment
        const tct_float4    *world_to_object;     // world-to-object transform matrix
        const tct_float4    *object_to_world;     // object-to-world transform matrix
        tct_int              object_id;           // state::object_id() result
    };
\endcode

Please refer to the structure documentation for more information.

In this example, we fill the material state structure with some example values and only use
one texture space.
For the world-to-object and object-to-world transformation matrices we use identity matrices.
We will iterate the \c position and \c text_coords fields over a 2x2 quad around the
center of the world with position \c x and \c y coordinates ranging from -1 to 1 and the
texture uv-coordinates ranging from 0 to 1, respectively.
</dd>

<dt><b>Execution of generated code (CPU)</b></dt>
<dd><br>
For the native (CPU) backend, filling this structure is actually already enough to
prepare the execution of the generated code. Calling #mi::neuraylib::ITarget_code::execute()
with the material state and a sufficiently large result buffer will fill the buffer
with the requested result.
In this example, we will provide a \c NULL pointer as a target argument block.
For instance compilation, the target argument block parameter is not used, and for class
compilation, providing a \c NULL pointer will result in the default target argument block
for the used material instance.
See \ref mi_neuray_compilation_modes for more details about compilation modes.



In this example, we bake a sub-expression of a material into a texture by executing
the generated code for every texel updating the material state accordingly.
At the end, we write the texture to disk.
</dd>

<dt><b>Texture handling</b></dt>
<dd><br>
Per default, the \neurayAdjectiveName provides a built-in runtime which handles texture access functions
(texture lookups etc.). In some situations, you may however want to provide your own implementation. This
requires you to disable the built-in texture handler by setting the #mi::neuraylib::IMdl_backend option 
\c use_builtin_resource_handler to \c "off" (via #mi::neuraylib::IMdl_backend::set_option()).
It also requires you to implement the following functions:

- tex_lookup_float4_2d

- tex_lookup_float3_2d

- tex_texel_float4_2d

- tex_lookup_float4_3d

- tex_lookup_float3_3d

- tex_texel_float4_3d

- tex_lookup_float4_cube

- tex_lookup_float3_cube

- tex_resolution_2d

Except for the last one, these functions correspond directly to the functions described in section 20.3
"Standard library functions - Texture" in the MDL specification.

You pass your functions to the
\neurayAdjectiveName via an instance of the struct #mi::neuraylib::Texture_handler_base when calling any
of the #mi::neuraylib::ITarget_code::execute*() functions. The #mi::neuraylib::Texture_handler_base has a
vtable parameter which contains function pointers matching the signature of the required functions. These
function pointers need to point to your functions.

An example implementation (limited to 2D texture lookups for now) can be found in texture_support.h.
To switch example_execution_native to the custom texturing code, please disable the define
\c USE_BUILTIN_TEXTURE_RUNTIME on top of example_execution_native.cpp.

</dd>

\section example_execution_native Example Source

<b>Source Code Location:</b>
  <tt>examples/mdl_sdk/execution_native/example_execution_native.cpp</tt>

\include execution_native/example_execution_native.cpp

<b>Source Code Location:</b>
  <tt>examples/mdl_sdk/execution_native/texture_support.h</tt>

\include execution_native/texture_support.h


<div align="right">
    [\link mi_neuray_example_code_gen Previous\endlink]
    [\link mi_neuray_examples Up\endlink]
    [\link mi_neuray_example_execution_ptx Next\endlink]
</div>

*/
