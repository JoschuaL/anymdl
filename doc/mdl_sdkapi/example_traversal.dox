/******************************************************************************
 * Copyright (c) 2018-2020, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/

/*! \page mi_neuray_example_traversal Example for Traversing Compiled Materials

<div align="right">
\if MDL_BIN_RELEASE
    [\link mi_neuray_example_distilling_glsl Previous\endlink]
\else
    [\link mi_neuray_example_derivatives Previous\endlink]
\endif
    [\link mi_neuray_examples Up\endlink]
    [\link mi_neuray_example_discovery Next\endlink]
</div>

This example demonstrates the traversal of compiled materials.
It thereby allows investigating the structure of expression graphs based on an example 
application that reconstructs compilable MDL code.

\section example_traversal_new New Topics

  - Traversal of a compiled material
  - Generating MDL code

\section example_traversal_descr Detailed Description

<dl>
    <dt><b>Basic traversal of a compiled material</b></dt>
    <dd><br>
        With this example, we provide the \c compiled_material_traverser_base, a simple base 
        class for iterating over the structure of a material in a recursive manner. During the
        traversal, virtual functions are called on certain occasions and while reaching 
        particular elements in the expression graph. Deriving classes, like the 
        \c compiled_material_traverser_print, implement those virtual methods in order
        to realize their intended logic. To keep track of the current state, the implementations
        can provide a custom context object that is passed through for each invocation without
        any changes by the base class.

        Similar to the definition of an MDL material, a compiled material also consists of three
        sections: parameters, temporaries, and the body. Therefore, the traversal also has three 
        corresponding stages: \c ES_PARAMETERS, \c ES_TEMPORARIES, and \c ES_BODY.
        There is one virtual method call at the beginning of each of those stages and one at
        the end, respectively. For convenience, there are two additional stages provided to the 
        deriving classes: \c ES_NOT_STARTED to define the current state before a traversal has
        been started and \c ES_FINISHED to indicate that the traversal is done. Deriving classes
        are free to keep track of the current state using the context object that is passed through.

        During the three main stages, the traversal visits the #mi::neuraylib::IExpression 
        and #mi::neuraylib::IValue nodes of the tree recursively. When reaching the next 
        node in the tree, the \c visit_begin(...) method is called. Then, the child elements are 
        processed. In case of multiple children, there is an additional call to 
        \c visit_child(...) for each child. This will happen while iterating over the arguments of a 
        #mi::neuraylib::IExpression_direct_call and while iterating over the components of a
        #mi::neuraylib::IValue_compound. A call to \c visit_end(...) indicates that the 
        processing of the current node is done.

        Each of these three methods provides a pointer to the compiled material that is processed,
        the custom context object, and a \c Traversal_element with information about the element
        that is currently visited. This includes pointers to the current expression, value, 
        parameter, or temporary. Only one of these four pointers is different from \c NULL 
        during each invocation. Depending on the stage, not all cases are possible. 
        During the \c ES_PARAMETERS stage, for instance, only parameters and values but no temporaries or expressions can occur. The Traversal_element also provides a \c sibling_count and a \c sibling_index that might be useful to derived classes like the \c compiled_material_traverser_print.

        To start the actual traversal, the protected \c traverse(...) method is called by
        by the deriving class. At this point the custom context object is provided to the base class.
    </dd>

    <dt><b>Reconstructing MDL code as example traversal</b></dt>
    <dd><br>
        The example application contains an MDL printer. Based on the \c compiled_material_traverser_base
        this printer generates a serialized representation of the compiled material in MDL syntax.
    </dd>

    <dt><b>Using the MDL printer</b></dt>
    <dd><br>
        The input of the traversers is a compiled material. Therefore, we first need to
        load a module, create a material instance, and compile this instance to get a 
        #mi::neuraylib::ICompiled_material. 
        Before starting the iteration of the expression tree, we setup the 
        \c Compiled_material_traverser_print::Context to configure the behavior of the printer: 
\code{.unparsed}

// Creates the context of a traversal, which includes required component and configurations.
Compiled_material_traverser_print::Context(
    mi::neuraylib::ITransaction* transaction, // used to resolve resources
    mi::neuraylib::IMdl_compiler* compiler,   // used to resolve resources
    bool keep_structure)                      // show compiler output vs. print valid MDL code

\endcode
        The constructor consumes three arguments. While the first two are required to resolve 
        textures, measured BSDFs, and light profiles, the last one parameter requires more 
        explanations.

        The structures produced by the compiler do not always match the structure of 
        the input material. The main reason for that is optimization and the simplification of
        expressions that are constant during compile time. Another example is the
        transformation of constants to parameters while in class compilation mode.
        Generating MDL code that reflects the latter directly may result in invalid MDL code.
        This can happen if keywords, like \c material_emission, appear as parameters.
        However, the discussed printer focuses on generating compilable MDL code but we also
        want to provide a tool to investigate the produced compiler output. To enable both,
        the example allows choosing between the two behaviors. Setting \c keep_structure to 
        \c true preserves the structure of the compiler output even if this would result in 
        printed MDL code that will not compile. Setting \c keep_structure to \c false, which is
        the default value, will inline the transformed constants back into the body. This results in MDL code that is easier to read and that can be 
        loaded and compiled later.
        
        After setting up the context, the traversal can be started by calling \c print_mdl(...):
\code{.cpp}

// generates MDL code that can be saved as a module
std::string Compiled_material_traverser_print::print_mdl(
    const mi::neuraylib::ICompiled_material* material, // the compiled material to process
    Compiled_material_traverser_print::Context& context, // the context that is passed through
    const std::string& original_module_name, // qualified name of the original module
    const std::string& output_material_name) const // simple name of the output material

\endcode
        Since the #mi::neuraylib::ICompiled_material lacks some information to generate a 
        valid module, the original module name has to be provided for referencing
        exported functions in the original module in which the material to process was defined in.
        The new material also requires a name that has to be provided, too.

        The returned result can then be written into a file for later investigation or processing.
        Besides that, the context contains some further information about the material:

\code{.cpp}

// indicates whether the output MDL code should be valid or not.
std::string Compiled_material_traverser_print::Context::get_is_valid_mdl()

\endcode
        If we do not inline transformed constants, we want to inform about invalid MDL after 
        running the printer. The result will be false if an invalid case was encountered.
        Note, this can only be false if \c keep_structure of the context was set to true.

\code{.cpp}
// gets modules that have been imported directly by the module and used by the input material
const std::set<std::string>& Compiled_material_traverser_print::Context::get_used_modules() const

// gets resources that have been imported directly by the module and used by the input material
const std::set<std::string>& Compiled_material_traverser_print::Context::get_used_resources() const

\endcode
        Since the printer needs to keep track of modules that have to be imported by the
        generated module, we also provide that information to the user. In addition to the
        modules, we also track the directly referenced resources.
    </dd>

    <dt><b>Running the example from the command line</b></dt>
    <dd><br>
        The example can be started from the command line.
        The module to process can be specified by passing a qualified name as an argument.
        Additionally, there are flags to choose between class and instance compilation:
        \c -class and -instance, respectively. If none of them is provided, the class compilation mode is used.
        Furthermore, passing the \c -keep flag will preserve the structure of the compiler output
        as described above. Here are some examples:

\code

>> example_traversal ::nvidia::core_definitions -instance -keep

\endcode
        will traverse all materials in the core_definitions module in instance mode while keeping
        the structure produced by the compiler.

\code{.unparsed}

>> example_traversal ::example -class
>> example_traversal ::example
>> example_traversal

\endcode
        All three commands above will produce the same results as they use the default parameters -- 
        the traversal of the materials defined in the example module. The class compilation 
        mode will be used and the compiler generated parameters are inlined.
    </dd>

    <dt><b>Restrictions</b></dt>
    <dd><br>
        With the goal of demonstrating the traversal, this printer has some restrictions:

        - Since the original module of the compiled input material is simply imported in the 
          generated MDL module, all local functions that are used by the material need to be 
          exported by the original module. If this is not the case, these dependencies can not be 
          resolved for the generated material.
        - Only MDL 1.4 compliant materials are supported.

        The header of \c compiled_material_traverser_base is listed below. It contains the
        interface declarations for the basic traversal. Please also refer to the source files for 
        more details on the printing and the formatting that is performed by the printer implementation. 
    </dd>
</dl>

\section example_traversal Example Source

<b>Source Code Location:</b><br>
  <tt>examples/mdl_sdk/traversal/example_traversal.cpp</tt><br>
  <tt>examples/mdl_sdk/shared/compiled_material_traverser_base.h</tt><br>
  <tt>examples/mdl_sdk/shared/compiled_material_traverser_base.cpp</tt><br>
  <tt>examples/mdl_sdk/traversal/compiled_material_traverser_print.h</tt><br>
  <tt>examples/mdl_sdk/traversal/compiled_material_traverser_print.cpp</tt>

\include shared/compiled_material_traverser_base.h

<div align="right">
\if MDL_BIN_RELEASE
    [\link mi_neuray_example_distilling_glsl Previous\endlink]
\else
    [\link mi_neuray_example_derivatives Previous\endlink]
\endif
    [\link mi_neuray_examples Up\endlink]
    [\link mi_neuray_example_discovery Next\endlink]
</div>

*/
