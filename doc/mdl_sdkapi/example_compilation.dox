/******************************************************************************
 * Copyright (c) 2013-2020, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/

/*! \page mi_neuray_example_compilation Example for Compilation of MDL Materials

<div align="right">
    [\link mi_neuray_example_calls Previous\endlink]
    [\link mi_neuray_examples Up\endlink]
    [\link mi_neuray_example_code_gen Next\endlink]
</div>

This example introduces compiled materials and highlights differences between different compilation
modes.

\section example_compilation_new New Topics

  - Compiled materials
  - Different compilation modes
  - Target code generation

\section example_compilation_descr Detailed Description

<dl>
    <dt><b>
        Compiled materials
    </b></dt>
    <dd><br>
        A compiled material is a compact, optimized representation of a material instance including
        all call expressions in its arguments. In this optimization step call expressions for
        arguments are inlined (similar to function calls in programming languages), constant
        expressions are folded, common subexpression elimination is taking place, etc.
        <!-- Workaround to prevent a layout problem after dd tags. -->
    </dd>
    <dt><b>
        Different compilation modes
    </b></dt>
    <dd><br>
        Please refer to \ref mi_neuray_compilation_modes for an introduction into instance and
        class compilation modes.

        In the output of this example, compare the difference between instance and class compilation mode of the initially created
        material instance. In class compilation mode, the expression for \c "surface.scattering.tint"
        is no longer a constant, but a parameter reference.

        Now compare the changes in both representations when an argument like \c "tint" is changed.
        In instance compilation mode, the constant changes its value accordingly, and consequently,
        the hash over all temporaries and fields changes, too. In class compilation mode, only the
        value of argument 0 changes. All temporaries and fields of the compiled material, and
        consequently the hash value, remain unchanged.
        <!-- Workaround to prevent a layout problem after dd tags. -->
    </dd>
    <dt><b>
        Target code generation
    </b></dt>
    <dd><br>
        Compiler backends allow to generate code from the abstract representation of compiled
        materials. There are different backends, e.g., for LLVM IR or CUDA PTX code. These backends
        can be obtained from #mi::neuraylib::IMdl_backend_api::get_backend().

        Backends support general and backend-specific options to influence the code generation. See
        #mi::neuraylib::IMdl_backend for details.

        Note that target code is not generated for an entire compiled material, but for specific
        subexpressions of the compiled material, like \c "surface.scattering.tint".
        <!-- Workaround to prevent a layout problem after dd tags. -->
    </dd>
</dl>

\section example_compilation Example Source

<b>Source Code Location:</b>
  <tt>examples/mdl_sdk/compilation/example_compilation.cpp</tt>

\include compilation/example_compilation.cpp

<div align="right">
    [\link mi_neuray_example_calls Previous\endlink]
    [\link mi_neuray_examples Up\endlink]
    [\link mi_neuray_example_code_gen Next\endlink]
</div>

*/
